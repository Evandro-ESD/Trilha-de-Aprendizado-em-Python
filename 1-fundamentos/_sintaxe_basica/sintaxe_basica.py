# Instala√ß√£o do Python

# https://www.python.org/

# Refer√™ncias:
#  -> https://www.youtube.com/watch?v=-VeVq64Fgw0&t=26710s
#  -> https://www.w3schools.com/python/default.asp


# ===========================================
# Sintaxe B√°sica em Python
# Autor: Evandro
# Descri√ß√£o: Este arquivo apresenta os conceitos fundamentais
# da sintaxe da linguagem Python de forma simples e pr√°tica.
# ===========================================

# Coment√°rios ( #  e  """ """ )
# Coment√°rio de uma linha

"""
Coment√°rio de m√∫ltiplas linhas
Muito √∫til para documentar blocos maiores
"""

# ===========================================
# Sa√≠da de dados e f-strings
# ===========================================
nome = "Evandro"
idade = 37
print(f"Ol√°, meu nome √© {nome} e tenho {idade} anos.")  # f-string
print("Soma de 2 + 2 =", 2 + 2)  # Exemplo de print simples

# ===========================================
# Tipos de dados b√°sicos
# ===========================================
inteiro = 10
flutuante = 3.14
texto = "Python"
booleano = True

print(type(inteiro), type(flutuante), type(texto), type(booleano))

# ===========================================
# Vari√°veis e atribui√ß√£o
# ===========================================
x = 5
y = 2
resultado = x + y
print("Resultado da soma:", resultado)

# ===========================================
# Entrada de dados (descomentando abaixo)
# ===========================================
# nome_usuario = input("Digite seu nome: ")
# print("Ol√°", nome_usuario)

# ===========================================
# Estruturas condicionais
# ===========================================
if x > y:
    print("x √© maior que y")
elif x == y:
    print("x e y s√£o iguais")
else:
    print("y √© maior que x")

# ===========================================
# La√ßos de repeti√ß√£o
# ===========================================
print("üëâ Exemplo com for:")
for i in range(3):
    print("Repeti√ß√£o n√∫mero", i)

print("üëâ Exemplo com while:")
contador = 0
while contador < 3:
    print("While:", contador)
    contador += 1

# ===========================================
# Listas e itera√ß√£o
# ===========================================
linguagens = ["python", "javascript", "java"]
for linguagem in linguagens:
    print("Fruta:", linguagem)

# Adicionando e removendo elementos
linguagens.append("typescript")
linguagens.remove("java")
print("Lista atualizada:", linguagens)

# ===========================================
# Dicion√°rio (dict)
# ===========================================
pessoa = {"nome": "Evandro", "idade": 37}
print("Nome:", pessoa["nome"])
print("Idade:", pessoa["idade"])

# ===========================================
# Operadores de compara√ß√£o e l√≥gicos
# ===========================================
a = 10
b = 20
print(a == b, a != b, a > b, a < b)  # Compara√ß√£o
print(a > 5 and b > 5)  # L√≥gico AND
print(a < 5 or b > 5)  # L√≥gico OR
print(not a == b)  # L√≥gico NOT


# ===========================================
# Fun√ß√µes simples
# ===========================================
def saudacao(nome):
    """Fun√ß√£o que retorna uma sauda√ß√£o personalizada."""
    return f"Ol√°, {nome}!"


print(saudacao("Pythonista"))


# Fun√ß√£o com retorno de soma
def somar(n1, n2):
    return n1 + n2


print("Soma:", somar(5, 7))

# ===========================================
# Boas pr√°ticas b√°sicas
# ===========================================
# - Use nomes de vari√°veis descritivos.
# - Siga a indenta√ß√£o de 4 espa√ßos.
# - Use coment√°rios claros e objetivos.
# - Escreva fun√ß√µes pequenas e bem definidas.
# - Utilize docstrings para documentar fun√ß√µes.

# ===========================================
# Observa√ß√µes finais
# ===========================================
# - Python diferencia letras mai√∫sculas e min√∫sculas.
# - N√£o √© necess√°rio declarar tipo de vari√°vel.
# - A indenta√ß√£o define blocos de c√≥digo.
# - Arquivos Python terminam com a extens√£o .py
